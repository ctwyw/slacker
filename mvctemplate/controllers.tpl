//Generated by slacker 
//gin router
/*
api.GET("/{{.LowerName}}/:id",controllers.Take{{.CamelCaseName}})
api.GET("/{{.LowerName}}",controllers.List{{.CamelCaseName}})
api.POST("/{{.LowerName}}",controllers.Create{{.CamelCaseName}})
api.PUT("/{{.LowerName}}/:id",controllers.Update{{.CamelCaseName}})
api.PATCH("/{{.LowerName}}/:id",controllers.Patch){{.CamelCaseName}}
api.DELETE("/{{.LowerName}}/:id",controllers.Delete{{.CamelCaseName}}) 
api.PATCH("/{{.LowerName}}",controllers.BatchPatch{{.CamelCaseName}})
api.DELETE("/{{.LowerName}}",controllers.BatchDelete{{.CamelCaseName}})
api.PUT("/{{.LowerName}}",controllers.BatchUpdate{{.CamelCaseName}}) 
*/

package controllers

import(
	 "{{"gosrc/models"| .ImportLibrary}}/{{.Name}}"
	"github.com/gin-gonic/gin"
	"net/http"
	"strconv"
)
 

func   List{{.CamelCaseName}}(c *gin.Context)  {
    var {{.LowerName}} {{.LowerName}}.{{.CamelCaseName}}
	offset,_:=strconv.ParseUint(c.DefaultQuery("offset","0"), 10, 64)
 
    limit,_:=strconv.ParseUint(c.DefaultQuery("limit","0"),10,64)
 	c.ShouldBindQuery(&{{.LowerName}})
   data,total,err:= Service.List{{.CamelCaseName}}(offset,limit)
   	if err != nil {
		JSON(c, nil,err)
		return
	} 

			JSON(c, gin.H{
		"data":  data,
		"total": total,
	},nil)
}

func   Take{{.CamelCaseName}}(c *gin.Context)  {
    var {{.LowerName}} {{.LowerName}}.{{.CamelCaseName}}
		c.ShouldBindQuery(&{{.LowerName}})
    id, err := strconv.ParseInt(c.Param("id"),10,64)
	if err != nil {
		JSON(c, nil,errcode.BadRequest)
		return
	} 
    {{.LowerName}}, err = Service.Take{{.CamelCaseName}}(id)
	if err != nil {
		JSON(c, nil,err)
		return
	}
			JSON(c, {{.LowerName}},nil)
}

func  Create{{.CamelCaseName}}(c *gin.Context)  {
    var {{.LowerName}} {{.LowerName}}.{{.CamelCaseName}}
    if err := c.ShouldBindJSON(&{{.LowerName}}); err != nil {
      		JSON(c, nil,errcode.BadRequest)
        return
	}
    {{.LowerName}},err := Service.Create{{.CamelCaseName}}({{.LowerName}})
	if err != nil {
		JSON(c, nil,err)
		return
	} 
		JSON(c, {{.LowerName}},nil)
}

func Update{{.CamelCaseName}}(c *gin.Context)  {
	  id, err := strconv.ParseInt(c.Param("id"),10,64)
	if err != nil {
	JSON(c, nil,errcode.BadRequest)
		return
	}
    var {{.LowerName}} {{.LowerName}}.{{.CamelCaseName}}
	if err := c.ShouldBindJSON(&{{.LowerName}}); err != nil {
		JSON(c, nil,errcode.BadRequest)
		return
	}
	{{.LowerName}}.{{.PrimaryKeyColumn.CamelCaseName}} = id
	err = Service.Update{{.CamelCaseName}}({{.LowerName}})
	if err != nil {
			JSON(c, nil,err)
		return
	}
		JSON(c, nil,nil)
}

func  Patch{{.CamelCaseName}}(c *gin.Context)  {
	id, err := strconv.ParseInt(c.Param("id"),10,64)
	if err != nil {
	JSON(c, nil,errcode.BadRequest)
		return
	}
	var updatefields = make(map[string]interface{})
	if err := c.ShouldBindJSON(&updatefields); err != nil {
	JSON(c, nil,errcode.BadRequest)
		return
	} 
	err = Service.Patch{{.CamelCaseName}}(id,updatefields)
	if err != nil {
		JSON(c, nil,err)
		return
	}
	JSON(c, nil,nil)
}

func  Delete{{.CamelCaseName}}(c *gin.Context)  {
    id, err := strconv.ParseInt(c.Param("id"),10,64)
	if err != nil { 
		JSON(c, nil,errcode.BadRequest)
		return
	} 
	err = Service.Delete{{.CamelCaseName}}(id)
	if err != nil {
		JSON(c, nil,err)
		return
	}
		JSON(c, nil,nil)
}

/*
func  BatchDelete{{.CamelCaseName}}(c *gin.Context) {
	ids := strings2int64s(c.QueryArray("id"))
	ids = append(ids, strings2int64s(c.QueryArray("id[]"))...) 
	err := Service.BatchDelete{{.CamelCaseName}}(ids)
	if err != nil {
			JSON(c, nil,err)
		return
	}
	JSON(c, nil,nil)
}



func  BatchPatch{{.CamelCaseName}}(c *gin.Context) {
	var updatefields = make(map[string]interface{})
	if err := c.ShouldBindJSON(&updatefields); err != nil {
		c.JSON(http.StatusOK, JSON.BadBinding(err))
		return
	}
	ids := strings2int64s(c.QueryArray("id"))
	ids = append(ids, strings2int64s(c.QueryArray("id[]"))...) 
	err := Service.BatchPatch{{.CamelCaseName}}(ids, updatefields)
	if err != nil {
			JSON(c, nil,err)
		return
	}
		JSON(c, nil,nil)
}

func  BatchUpdate{{.CamelCaseName}}(c *gin.Context) {
	var {{.LowerName}} {{.LowerName}}.{{.CamelCaseName}} 
	if err := c.ShouldBindJSON(&{{.LowerName}}); err != nil {
		JSON(c, nil,err)
		return
	}
	ids := strings2int64s(c.QueryArray("id"))
	ids = append(ids, strings2int64s(c.QueryArray("id[]"))...)
	err := Service.BatchUpdate{{.CamelCaseName}}(ids)
	if err != nil {
			JSON(c, nil,err)
		return
	}
		JSON(c, nil,nil)
} 
*/